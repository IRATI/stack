package rina.messages;
//option optimize_for = LITE_RUNTIME;

message dataTransferConstants_t{				//Specifies the constants for EFCP to use
	optional uint32 maxPDUSize = 1;				//The maximum size of a PDU, in bytes
	optional uint32 addressLength = 2;			//The length of the address field in EFCP PDUs, in bytes
	optional uint32 portIdLength = 3;			//The length of the portId field in EFCP PDUs, in bytes
	optional uint32 cepIdLength = 4;			//The length of the Connection Endpoint Id field in EFCP PDUs, in bytes
	optional uint32 qosidLength = 5;			//The length of the QoS id field in EFCP PDUs, in bytes
	optional uint32 sequenceNumberLength = 6;		//The length of the sequenceNumber field in EFCP PDUs, in bytes
	optional uint32 lengthLength = 7;			//The length of the length field in EFCP PDUs, in bytes
	optional uint64 seqRolloverThreshold = 8;		//The sequence number after which the Flow Allocator instance should create a new EFCP connection
	optional uint32 maxPDULifetime = 9;			//The maximum time a PDU can "live" within the DIF, in milliseconds
	optional bool DIFConcatenation = 10;			//This is true if multiple SDUs can be delimited and concatenated within a single PDU
	optional bool DIFFragmentation = 11;			//This is true if multiple SDUs can be fragmented and reassembled within a single PDU
	optional bool DIFIntegrity = 12;			//True if the PDUs in this DIF have CRC, TTL, and/or encryption
	optional uint32 maxTimeToKeepRetransmitting = 13;	//The maximum time DTCP will try to keep retransmitting a PDU, before discarding it. This is R in delta-T
	optional uint32 maxTimeToACK = 14;			//The maximum time the receiving side of a DTCP connection will take to ACK a PDU once it has received it. This is A in delta-T
	optional uint32 rateLength = 15;			//The length of the rate field in the FC PDUs (for rate based flows)
	optional uint32 frameLength = 16;			//The length of the frame field in the FC PDUs (for rate based flows)
	optional uint32 ctrlSequenceNumberLength = 17;		//The length of the ctrlSequenceNumber field in EFCP(DTCP) PDUs, in bytes
}
