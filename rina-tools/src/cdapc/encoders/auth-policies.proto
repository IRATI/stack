package rina.auth.policies.googleprotobuf;

message authOptsSSH2_t {
	repeated string key_exch_algs = 1;		// Supported key exchange algorithms
	repeated string encrypt_algs = 2;		// Supported encryption algorithms
	repeated string mac_algs = 3;			// Supported MAC algorithms
	repeated string compress_algs = 4;		// Supported compression algorithms
	optional bytes dh_public_key = 5;		// EDH public key
}

message clientChallReplySSH2_t {
	optional bytes client_challenge_rep = 1;	// Client challenge reply
	optional bytes server_challenge = 2;		// Server challenge request
}

message authOptsPassword_t {
	repeated string cipher = 1;			// Supported ciphers
}

message authOptsTLSHandshake_t {
	optional uint32 utc_unix_time = 1;		// The current time and date in standard UNIX 32-bit format
	optional bytes random_bytes = 2;		// 28 bytes generated by a secure random number generator
	repeated string mac_algs = 3;			// Supported MAC algorithms, sorted by preference
	repeated string compress_methods = 4;		// Supported compression methods, sorted by preference
	optional uint32 ap_con_id = 5;
	repeated string encrypt_algs = 6;		// Supported encryption algorithms
}

message serverHelloTLSHandshake_t {
	optional string version = 1;			// The version of the policy chosen for the connection
	optional uint32 utc_unix_time = 2;		// The current time and date in standard UNIX 32-bit format
	optional bytes random_bytes = 3;		// 28 bytes generated by a secure random number generator
	optional string mac_alg = 4;			// MAC alg chosen for the connection
	optional string compress_method = 5;		// Compression method chosen for the connection
	optional uint32 ap_con_id = 6;			// Application connection id
}

message CertificateTLSHandshake_t {
	optional bytes certificate_chain = 1;			// The encoded certificate chain
}

message clientKeyExchangeTLSHandshake_t {
	optional bytes enc_pmaster_secret = 1;			// The encrypted pre-master secret
}	

message clientCertificateVerifyTLSHandshake_t {		// The encrypted hashed messages 
	optional bytes enc_verify_hash = 1;
}

message FinishMessageTLSHandshake_t {
	optional bytes opaque_verify_data = 1;			//opaque verify message protected with new algorithm
}
