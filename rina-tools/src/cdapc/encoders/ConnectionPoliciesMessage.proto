package rina.messages;
//option optimize_for = LITE_RUNTIME;
import "PolicyDescriptorMessage.proto";

message dtcpWindowBasedFlowControlConfig_t {  //the window-based flow control configuration of a connection
	optional uint64 maxclosedwindowqueuelength = 1;                 //Integer that the number PDUs that can be put on the ClosedWindowQueue before something must be done
	optional uint64 initialcredit = 2; 								//initial sequence number to get right window edge
	optional policyDescriptor_t rcvrflowcontrolpolicy = 3;          //Invoked when a Transfer PDU is received to give the receiving PM an opportunity to update the flow control allocations
	optional policyDescriptor_t txcontrolpolicy = 4;                //This policy is used when there are conditions that warrant sending fewer PDUs than allowed by the sliding window flow control, e.g. the ECN bit is set.
}

message dtcpRateBasedFlowControlConfig_t {  //the rate-based flow control configuration of a connection
	optional uint64 sendingrate = 1;                                //the number of PDUs that may be sent in a TimePeriod. Used with rate-based flow control
	optional uint64 timeperiod = 2;						            //length of time in microseconds for pacing rate-based flow control
	optional policyDescriptor_t norateslowdownpolicy = 3;           //used to momentarily lower the send rate below the rate allowed
	optional policyDescriptor_t nooverridedefaultpeakpolicy = 4;    //Allows rate-based flow control to exceed its nominal rate
	optional policyDescriptor_t ratereductionpolicy = 5;            //Allows an alternate action when using rate-based flow control and the number of free buffers is getting low
}

message dtcpFlowControlConfig_t {  //the flow control configuration of a connection
	optional bool windowBased = 1;                                       //indicates whether window-based flow control is in use
	optional dtcpWindowBasedFlowControlConfig_t windowBasedConfig = 2;   //the window-based flow control configuration
	optional bool rateBased = 3;										 //indicates whether rate-based flow control is in use
	optional dtcpRateBasedFlowControlConfig_t rateBasedConfig = 4;       //the rate-based flow control configuration
	optional uint64 sentbytesthreshold = 5;							     //The number of free bytes below which flow control should slow or block the user from doing any more Writes
	optional uint64 sentbytespercentthreshold = 6;						 //The percent of free bytes below, which flow control should slow or block the user from doing any more Writes
	optional uint64 sentbuffersthreshold = 7;							 //The number of free buffers below which flow control should slow or block the user from doing any more Writes
	optional uint64 rcvbytesthreshold = 8;								 //The number of free bytes below which flow control does not move or decreases the amount the Right Window Edge is moved
	optional uint64 rcvbytespercentthreshold = 9;						 //The number of free buffers at which flow control does not advance or decreases the amount the Right Window Edge is moved.
	optional uint64 rcvbuffersthreshold = 10;						     //The percent of free buffers below which flow control should not advance or decreases the amount the Right Window Edge is moved
	optional policyDescriptor_t closedwindowpolicy = 11;                 //Determine the action to be taken when the receiver has not extended more credit to allow the sender to send more PDUs
	optional policyDescriptor_t flowcontroloverrunpolicy = 12;           //Determines what action to take if the receiver receives PDUs but the credit or rate has been exceeded
	optional policyDescriptor_t reconcileflowcontrolpolicy = 13;         //Invoked when both Credit and Rate based flow control are in use and they disagree on whether the PM can send or receive data
    optional policyDescriptor_t receivingflowcontrolpolicy = 14;         //Allows some discretion in when to send a Flow Control PDU when there is no Retransmission Control
}

message dtcpRtxControlConfig_t {  //the rtx control configuration of a connection
    optional uint32 maxtimetoretry = 1;							   //Maximum time trying to retransmit a PDU (R)
	optional uint32 datarxmsnmax = 2;                              //the number of times the retransmission of a PDU will be attempted before some other action must be taken
    optional policyDescriptor_t rtxtimerexpirypolicy = 3;          //Executed by the sender when a Retransmission Timer Expires
    optional policyDescriptor_t senderackpolicy = 4;               //Executed by the sender and provides the Sender with some discretion on when PDUs may be deleted from the ReTransmissionQ
    optional policyDescriptor_t recvingacklistpolicy = 5;          //
    optional policyDescriptor_t rcvrackpolicy = 6;                 //Executed by the receiver of the PDU and provides some discretion in the action taken
    optional policyDescriptor_t sendingackpolicy = 7;              //allows an alternate action when the A-Timer expires when DTCP is present.
    optional policyDescriptor_t rcvrcontrolackpolicy = 8;          //Allows an alternate action when a Control Ack PDU is received
    optional uint32 initialRtxTime = 9;							   //maximum time that a sender will wait before retransmitting the SDU
}

message dtcpConfig_t {  //configuration of DTCP for a connection
    optional bool flowControl = 1;                                 //indicates if flow control is enabled in this connection
    optional dtcpFlowControlConfig_t flowControlConfig = 2;        //the flow control configuration
    optional bool rtxControl = 3;                                  //inidicates if rtx control is enabled in this connection
    optional dtcpRtxControlConfig_t rtxControlConfig = 4;          //the rtx control configuration
    optional policyDescriptor_t lostcontrolpdupolicy = 5;          //Determines what action to take when the PM detects that a control PDU (Ack or Flow Control) may have been lost
    optional policyDescriptor_t rttestimatorpolicy = 6;            //Executed by the sender to estimate the duration of the retx timer
    optional policyDescriptor_t dtcppolicyset = 7;                 //it indicates the name of the policy set fot the dtcp
}

message dtpConfig_t { //configuration of the policies and parameters of a DTP element
	optional bool dtcpPresent = 1;                                 //indicates if this connection is using DTCP
	optional policyDescriptor_t rcvrtimerinactivitypolicy = 3;     //If no PDUs arrive in this time period, the receiver should expect a DRF in the next Transfer PDU
        optional policyDescriptor_t sendertimerinactiviypolicy = 4;    //This timer is used to detect long periods of no traffic, indicating that a DRF should be sent
	optional policyDescriptor_t initialseqnumpolicy = 5;           //allows some discretion in selecting the initial sequence number, when DRF is going to be sent
	optional uint64 seqnumrolloverthreshold = 6;                   //the sequence number rollover threshold
	optional uint32 initialATimer = 7;                             //maximum time that a receiver will wait before sending an Ack
        optional policyDescriptor_t dtppolicyset = 8;                  //it indicates the name of the policy set fot the dtp
}

message connection_t {
	optional uint32 src_cep_id = 1; 				//identifies the source connection endpoint (unique within the source IPC process)
	optional uint32 dest_cep_id = 2; 				//identifies the destination connection endpoint (unique within the destination IPC process)
	optional uint32 qos_id = 3; 					//identifies the QoS cube under which this connection is classified
	optional uint32 src_address = 4;				//The local IPCP address
	optional uint32 dest_address = 5;				//The remote IPCP address
	optional uint32 port_id = 6;					//The port-id of the flow this connection belongs to
	optional dtpConfig_t dtp_config = 7; 				//The DTP configuration
	optional uint32 pdus_tx = 8;					//PDUs transmitted on this connection
	optional uint32 pdus_rx = 9;					//PDUs received on this connection
	optional uint64 bytes_tx = 10;					//Bytes transmitted on this connection
	optional uint64 bytes_rx = 11;					//Bytes received on this connection
}
